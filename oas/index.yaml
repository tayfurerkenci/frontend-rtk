openapi: 3.0.3
info:
  title: Simple Bank - OpenAPI 3.1
  description: This is the OpenAPI 3.1 specification for the Simple Bank API.
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
    description: Local server

security:
  - PasetoAuth: []

paths:
  /users:
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input
        "403":
          description: "pq: duplicate key value violates unique constraint \"users_pkey\""
  /users/login:
    post:
      tags:
        - users/login
      summary: Log in a user
      description: Log in a user
      operationId: loginUser
      requestBody:
        description: A user login with a username and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
        '400':
          description: Invalid input
        '401':
          description: "crypto/bcrypt: hashedPassword is not the hash of the given password"
        '404':
          description: "sql: no rows in result set"
  /transfers:
    post:
      tags:
        - transfers
      summary: Create a new transfer
      description: Create a new transfer
      operationId: createTransfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "account [1] currency mismatch: CAD vs USD"
        "403":
          description: "pq: duplicate key value violates unique constraint \"transfers_pkey\""
  /accounts:
    get:
      tags:
        - accounts
      summary: Get a list of accounts
      description: Get a list of accounts
      operationId: getAccounts
      parameters:
        - name: page_id
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
            default: 5
      responses:
        '200':
          description: A list of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          description: Invalid input
    post:
      tags:
        - accounts
      summary: Create a new account
      description: Create a new account
      operationId: createAccount
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currency:
                  type: string
                  enum: [USD, EUR, CAD, TRY]
                  description: The currency of the account
              required:
                - currency
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
  /accounts/{id}:
    get:
      summary: Get an account by ID
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found
components:
  schemas:
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          examples: 
            - johndoe
          pattern: '^[a-zA-Z0-9]*$'  # alphanumeric characters
        password:
          type: string
          description: The password of the user
          minLength: 6  # minimum length of 6 characters
          examples: 
            - password
        full_name:
          type: string
          description: The full name of the user
          examples: 
            - John Doe
        email:
          type: string
          description: The email of the user
          format: email  # email format
          examples: 
            - johndoe@examples.com
      required:
        - username
        - full_name
        - email
        - password
    UserResponse:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          examples: 
            - johndoe
        full_name:
          type: string
          description: The full name of the user
          examples: 
            - John Doe
        email:
          type: string
          description: The email of the user
          format: email
          examples: 
            - johndoe@examples.com
        password_changed_at:
          type: string
          format: date-time
          description: The time when the password was last changed
          examples: 
            - '2022-01-01T00:00:00Z'
        created_at:
          type: string
          format: date-time
          description: The time when the user was created
          examples: 
            - '2022-01-01T00:00:00Z'
    LoginUserRequest:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          examples: 
            - johndoe
          pattern: '^[a-zA-Z0-9]*$'  # alphanumeric characters
        password:
          type: string
          description: The password of the user
          minLength: 6  # minimum length of 6 characters
          examples: 
            - password
      required:
        - username
        - password
    LoginUserResponse:
      type: object
      properties:
        access_token:
          type: string
          description: The access token for the user
          examples: 
            - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        user:
          $ref: '#/components/schemas/UserResponse'
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the account
          readOnly: true
        owner:
          type: string
          description: The owner of the account
        balance:
          type: integer
          format: int64
          description: The balance of the account
        currency:
          type: string
          description: The currency of the account
        created_at:
          type: string
          format: date-time
          description: The date and time when the account was created
          readOnly: true
      required:
        - owner
        - balance
        - currency
    Entry:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the entry
          readOnly: true
        account_id:
          type: integer
          format: int64
          description: The ID of the account associated with the entry
        amount:
          type: integer
          format: int64
          description: The amount of the entry
        created_at:
          type: string
          format: date-time
          description: The date and time when the entry was created
          readOnly: true
      required:
        - account_id
        - amount
    TransferRequest:
      type: object
      properties:
        from_account_id:
          type: integer
          format: int64
          description: The ID of the account to transfer from
          examples: 
            - 1
          minimum: 1
        to_account_id:
          type: integer
          format: int64
          description: The ID of the account to transfer to
          examples: 
            - 2
          minimum: 1
        amount:
          type: integer
          format: int64
          description: The amount to transfer
          examples: 
            - 100
          minimum: 1
        currency:
          type: string
          description: The currency of the transfer
          examples: 
            - USD
      required:
        - from_account_id
        - to_account_id
        - amount
        - currency
    TransferResponse:
      type: object
      properties:
        transfer:
          type: object
          properties:
            id:
              type: integer
              format: int64
            from_account_id:
              type: integer
              format: int64
            to_account_id:
              type: integer
              format: int64
            amount:
              type: integer
              format: int64
            created_at:
              type: string
              format: date-time
        from_account:
          $ref: '#/components/schemas/Account'
        to_account:
          $ref: '#/components/schemas/Account'
        from_entry:
          $ref: '#/components/schemas/Entry'
        to_entry:
          $ref: '#/components/schemas/Entry'